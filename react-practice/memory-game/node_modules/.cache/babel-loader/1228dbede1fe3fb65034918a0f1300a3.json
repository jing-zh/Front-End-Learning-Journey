{"ast":null,"code":"var _jsxFileName = \"/Users/boluoluo/Desktop/Front-End-Learning-Journey/react-practice/memory-game/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport SingleCard from \"./components/SingleCard.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  src: \"/img/helmet-1.png\",\n  matched: false\n}, {\n  src: \"/img/potion-1.png\",\n  matched: false\n}, {\n  src: \"/img/ring-1.png\",\n  matched: false\n}, {\n  src: \"/img/scroll-1.png\",\n  matched: false\n}, {\n  src: \"/img/shield-1.png\",\n  matched: false\n}, {\n  src: \"/img/sword-1.png\",\n  matched: false\n}];\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false); // shuffle cards: duplicate cards\n  // ==============================\n\n  const shuffleCards = () => {\n    // duplicate each card\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    })); // randomize\n    // update cards\n\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  }; // handle a choice\n  // ===============\n\n\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card); // ++++n1++++\n    // if compare cards right here, it might not work because these state updates are scheduled\n    // code might fire first before even the state value is updated.\n    // that's why we need to use useEffect hook\n  }; // compare 2 selected cards\n  // =======================\n\n\n  useEffect(() => {\n    // setDisabled(true);\n    // ++++n2+++++\n    // 不要放在这个位置，因为这会直接在component load以后disable所有card\n    // useEffect runs automatically when the component first evaluates, and when the disabled is true, we cannot flip the card.\n    if (choiceOne && choiceTwo) {\n      setDisabled(true); // 在choices have been compared后\n\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          // 这里return了一个new array\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return { ...card,\n                matched: true\n              }; // ++++q1++++\n              // 这一步有一点模糊\n              // 怎么使用map和...\n              // A：将原来的cards array改变，把其中match的card的matched property改变为true，并返回一个新的array\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn(); // 这里是设置了一个new card state\n      } else {\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]); // reset choices & increase turn\n  // ============================\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n    setDisabled(false);\n  }; // start a new game automatically\n  // ==============================\n\n\n  useEffect(() => {\n    shuffleCards();\n  }, []); // 这一步useffect没有放在上一个useeffect是因为不想要每次change choice one and choice two的时候，就restart the game\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Magic Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice,\n        flipped: card === choiceOne || card === choiceTwo || card.matched // when to keep the card flipped\n        // three scenarios:\n        // 1.when we flip the card one\n        // 2. when we flip the card two\n        // 3. when our cards are matched\n        ,\n        disabled: disabled\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Turns: \", turns]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"zpj1OC3lPd52QG2dCYHCz30icbw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/boluoluo/Desktop/Front-End-Learning-Journey/react-practice/memory-game/src/App.js"],"names":["useEffect","useState","SingleCard","cardImages","src","matched","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","disabled","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","prevCards","resetTurn","setTimeout","prevTurns"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,4BAAvB;;AAEA,MAAMC,UAAU,GAAG,CACjB;AAAEC,EAAAA,GAAG,EAAE,mBAAP;AAA4BC,EAAAA,OAAO,EAAE;AAArC,CADiB,EAEjB;AAAED,EAAAA,GAAG,EAAE,mBAAP;AAA4BC,EAAAA,OAAO,EAAE;AAArC,CAFiB,EAGjB;AAAED,EAAAA,GAAG,EAAE,iBAAP;AAA0BC,EAAAA,OAAO,EAAE;AAAnC,CAHiB,EAIjB;AAAED,EAAAA,GAAG,EAAE,mBAAP;AAA4BC,EAAAA,OAAO,EAAE;AAArC,CAJiB,EAKjB;AAAED,EAAAA,GAAG,EAAE,mBAAP;AAA4BC,EAAAA,OAAO,EAAE;AAArC,CALiB,EAMjB;AAAED,EAAAA,GAAG,EAAE,kBAAP;AAA2BC,EAAAA,OAAO,EAAE;AAApC,CANiB,CAAnB;;AASA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,KAAD,CAAxC,CALa,CAOb;AACA;;AACA,QAAMgB,YAAY,GAAG,MAAM;AACzB;AACA,UAAMC,aAAa,GAAG,CAAC,GAAGf,UAAJ,EAAgB,GAAGA,UAAnB,EACnBgB,IADmB,CACd,MAAMC,IAAI,CAACC,MAAL,KAAgB,GADR,EAEnBC,GAFmB,CAEdC,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWC,MAAAA,EAAE,EAAEJ,IAAI,CAACC,MAAL;AAAf,KAAX,CAFe,CAAtB,CAFyB,CAKzB;AAEA;;AACAT,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAN,IAAAA,QAAQ,CAACU,aAAD,CAAR;AACAR,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACD,GAZD,CATa,CAuBb;AACA;;;AAEA,QAAMe,YAAY,GAAIF,IAAD,IAAU;AAC7BZ,IAAAA,SAAS,GAAGG,YAAY,CAACS,IAAD,CAAf,GAAwBX,YAAY,CAACW,IAAD,CAA7C,CAD6B,CAE7B;AACA;AACA;AACA;AACD,GAND,CA1Ba,CAkCb;AACA;;;AACAvB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AAEA,QAAIW,SAAS,IAAIE,SAAjB,EAA4B;AAC1BG,MAAAA,WAAW,CAAC,IAAD,CAAX,CAD0B,CAE1B;;AACA,UAAIL,SAAS,CAACP,GAAV,KAAkBS,SAAS,CAACT,GAAhC,EAAqC;AACnCI,QAAAA,QAAQ,CAAEkB,SAAD,IAAe;AACtB;AACA,iBAAOA,SAAS,CAACJ,GAAV,CAAeC,IAAD,IAAU;AAC7B,gBAAIA,IAAI,CAACnB,GAAL,KAAaO,SAAS,CAACP,GAA3B,EAAgC;AAC9B,qBAAO,EAAE,GAAGmB,IAAL;AAAWlB,gBAAAA,OAAO,EAAE;AAApB,eAAP,CAD8B,CAE9B;AACA;AACA;AAEA;AACD,aAPD,MAOO;AACL,qBAAOkB,IAAP;AACD;AACF,WAXM,CAAP;AAYD,SAdO,CAAR;AAeAI,QAAAA,SAAS,GAhB0B,CAiBnC;AACD,OAlBD,MAkBO;AACLC,QAAAA,UAAU,CAAC,MAAMD,SAAS,EAAhB,EAAoB,IAApB,CAAV;AACD;AACF;AACF,GA/BQ,EA+BN,CAAChB,SAAD,EAAYE,SAAZ,CA/BM,CAAT,CApCa,CAqEb;AACA;;AAEA,QAAMc,SAAS,GAAG,MAAM;AACtBf,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAJ,IAAAA,QAAQ,CAAEmB,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAR;AACAb,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GALD,CAxEa,CA+Eb;AACA;;;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,YAAY;AACb,GAFQ,EAEN,EAFM,CAAT,CAlFa,CAsFb;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEA,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACGV,KAAK,CAACe,GAAN,CAAWC,IAAD,iBACT,QAAC,UAAD;AAEE,QAAA,IAAI,EAAEA,IAFR;AAGE,QAAA,YAAY,EAAEE,YAHhB;AAIE,QAAA,OAAO,EAAEF,IAAI,KAAKZ,SAAT,IAAsBY,IAAI,KAAKV,SAA/B,IAA4CU,IAAI,CAAClB,OAJ5D,CAKE;AACA;AACA;AACA;AACA;AATF;AAUE,QAAA,QAAQ,EAAEU;AAVZ,SACOQ,IAAI,CAACC,EADZ;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAHF,eAmBE;AAAA,4BAAWf,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GA/GQH,G;;KAAAA,G;AAiHT,eAAeA,GAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport SingleCard from \"./components/SingleCard.js\";\n\nconst cardImages = [\n  { src: \"/img/helmet-1.png\", matched: false },\n  { src: \"/img/potion-1.png\", matched: false },\n  { src: \"/img/ring-1.png\", matched: false },\n  { src: \"/img/scroll-1.png\", matched: false },\n  { src: \"/img/shield-1.png\", matched: false },\n  { src: \"/img/sword-1.png\", matched: false },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  // shuffle cards: duplicate cards\n  // ==============================\n  const shuffleCards = () => {\n    // duplicate each card\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n    // randomize\n\n    // update cards\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n\n  // handle a choice\n  // ===============\n\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n    // ++++n1++++\n    // if compare cards right here, it might not work because these state updates are scheduled\n    // code might fire first before even the state value is updated.\n    // that's why we need to use useEffect hook\n  };\n\n  // compare 2 selected cards\n  // =======================\n  useEffect(() => {\n    // setDisabled(true);\n    // ++++n2+++++\n    // 不要放在这个位置，因为这会直接在component load以后disable所有card\n    // useEffect runs automatically when the component first evaluates, and when the disabled is true, we cannot flip the card.\n\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      // 在choices have been compared后\n      if (choiceOne.src === choiceTwo.src) {\n        setCards((prevCards) => {\n          // 这里return了一个new array\n          return prevCards.map((card) => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true };\n              // ++++q1++++\n              // 这一步有一点模糊\n              // 怎么使用map和...\n\n              // A：将原来的cards array改变，把其中match的card的matched property改变为true，并返回一个新的array\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n        // 这里是设置了一个new card state\n      } else {\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  // reset choices & increase turn\n  // ============================\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns((prevTurns) => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  // start a new game automatically\n  // ==============================\n\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n\n  // 这一步useffect没有放在上一个useeffect是因为不想要每次change choice one and choice two的时候，就restart the game\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <SingleCard\n            key={card.id}\n            card={card}\n            handleChoice={handleChoice}\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\n            // when to keep the card flipped\n            // three scenarios:\n            // 1.when we flip the card one\n            // 2. when we flip the card two\n            // 3. when our cards are matched\n            disabled={disabled}\n          />\n        ))}\n      </div>\n      <p>Turns: {turns}</p>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}