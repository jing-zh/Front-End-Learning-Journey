{"ast":null,"code":"var _jsxFileName = \"/Users/boluoluo/Desktop/Front-End-Learning-Journey/react-practice/memory-game/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport SingleCard from \"./components/SingleCard.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  src: \"/img/helmet-1.png\"\n}, {\n  src: \"/img/potion-1.png\"\n}, {\n  src: \"/img/ring-1.png\"\n}, {\n  src: \"/img/scroll-1.png\"\n}, {\n  src: \"/img/shield-1.png\"\n}, {\n  src: \"/img/sword-1.png\"\n}];\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null); // shuffle cards: duplicate cards\n\n  const shuffleCards = () => {\n    // duplicate each card\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    })); // randomize\n    // update cards\n\n    setCards(shuffledCards);\n    setTurns(0);\n  }; // handle a choice\n\n\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card); // notes1\n    // +++++if compare cards right here, it might not work because these state updates are scheduled\n    // +++++code might fire first before even the state value is updated.\n    // +++++that's why we need to use useEffect hook\n  }; // compare 2 selected cards\n\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        console.log(\"those cards match\");\n        resetTurn();\n      } else {\n        console.log(\"those cards do not match\");\n        resetTurn();\n      }\n    }\n  }, [choiceOne, choiceTwo]); // reset choices & increase turn\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Magic Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/JnteANCPxCZNpFpO1ZAWIjzFcc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/boluoluo/Desktop/Front-End-Learning-Journey/react-practice/memory-game/src/App.js"],"names":["useEffect","useState","SingleCard","cardImages","src","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","console","log","resetTurn","prevTurns"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,4BAAvB;;AAEA,MAAMC,UAAU,GAAG,CACjB;AAAEC,EAAAA,GAAG,EAAE;AAAP,CADiB,EAEjB;AAAEA,EAAAA,GAAG,EAAE;AAAP,CAFiB,EAGjB;AAAEA,EAAAA,GAAG,EAAE;AAAP,CAHiB,EAIjB;AAAEA,EAAAA,GAAG,EAAE;AAAP,CAJiB,EAKjB;AAAEA,EAAAA,GAAG,EAAE;AAAP,CALiB,EAMjB;AAAEA,EAAAA,GAAG,EAAE;AAAP,CANiB,CAAnB;;AASA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C,CAJa,CAMb;;AACA,QAAMa,YAAY,GAAG,MAAM;AACzB;AACA,UAAMC,aAAa,GAAG,CAAC,GAAGZ,UAAJ,EAAgB,GAAGA,UAAnB,EACnBa,IADmB,CACd,MAAMC,IAAI,CAACC,MAAL,KAAgB,GADR,EAEnBC,GAFmB,CAEdC,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWC,MAAAA,EAAE,EAAEJ,IAAI,CAACC,MAAL;AAAf,KAAX,CAFe,CAAtB,CAFyB,CAKzB;AAEA;;AACAX,IAAAA,QAAQ,CAACQ,aAAD,CAAR;AACAN,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACD,GAVD,CAPa,CAmBb;;;AAEA,QAAMa,YAAY,GAAIF,IAAD,IAAU;AAC7BV,IAAAA,SAAS,GAAGG,YAAY,CAACO,IAAD,CAAf,GAAwBT,YAAY,CAACS,IAAD,CAA7C,CAD6B,CAE7B;AACA;AACA;AACA;AACD,GAND,CArBa,CA6Bb;;;AACApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,SAAS,IAAIE,SAAjB,EAA4B;AAC1B,UAAIF,SAAS,CAACN,GAAV,KAAkBQ,SAAS,CAACR,GAAhC,EAAqC;AACnCmB,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAC,QAAAA,SAAS;AACV,OAHD,MAGO;AACLF,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAC,QAAAA,SAAS;AACV;AACF;AACF,GAVQ,EAUN,CAACf,SAAD,EAAYE,SAAZ,CAVM,CAAT,CA9Ba,CA0Cb;;AAEA,QAAMa,SAAS,GAAG,MAAM;AACtBd,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAJ,IAAAA,QAAQ,CAAEiB,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAR;AACD,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEZ,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACGR,KAAK,CAACa,GAAN,CAAWC,IAAD,iBACT,QAAC,UAAD;AAA0B,QAAA,IAAI,EAAEA,IAAhC;AAAsC,QAAA,YAAY,EAAEE;AAApD,SAAiBF,IAAI,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GA7DQhB,G;;KAAAA,G;AA+DT,eAAeA,GAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport SingleCard from \"./components/SingleCard.js\";\n\nconst cardImages = [\n  { src: \"/img/helmet-1.png\" },\n  { src: \"/img/potion-1.png\" },\n  { src: \"/img/ring-1.png\" },\n  { src: \"/img/scroll-1.png\" },\n  { src: \"/img/shield-1.png\" },\n  { src: \"/img/sword-1.png\" },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n\n  // shuffle cards: duplicate cards\n  const shuffleCards = () => {\n    // duplicate each card\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n    // randomize\n\n    // update cards\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n\n  // handle a choice\n\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n    // notes1\n    // +++++if compare cards right here, it might not work because these state updates are scheduled\n    // +++++code might fire first before even the state value is updated.\n    // +++++that's why we need to use useEffect hook\n  };\n\n  // compare 2 selected cards\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        console.log(\"those cards match\");\n        resetTurn();\n      } else {\n        console.log(\"those cards do not match\");\n        resetTurn();\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  // reset choices & increase turn\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns((prevTurns) => prevTurns + 1);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <SingleCard key={card.id} card={card} handleChoice={handleChoice} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}