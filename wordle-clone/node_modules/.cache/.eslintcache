[{"/Users/boluoluo/Desktop/main-github/Front-End-Learning-Journey/projects/wordle-clone/src/index.js":"1","/Users/boluoluo/Desktop/main-github/Front-End-Learning-Journey/projects/wordle-clone/src/App.js":"2","/Users/boluoluo/Desktop/main-github/Front-End-Learning-Journey/projects/wordle-clone/src/components/Wordle.js":"3","/Users/boluoluo/Desktop/main-github/Front-End-Learning-Journey/projects/wordle-clone/src/hooks/useWordle.js":"4"},{"size":217,"mtime":1648547693000,"results":"5","hashOfConfig":"6"},{"size":2186,"mtime":1653041752792,"results":"7","hashOfConfig":"6"},{"size":482,"mtime":1653044132332,"results":"8","hashOfConfig":"6"},{"size":2092,"mtime":1653043829325,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j6bekq",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"/Users/boluoluo/Desktop/main-github/Front-End-Learning-Journey/projects/wordle-clone/src/index.js",[],[],"/Users/boluoluo/Desktop/main-github/Front-End-Learning-Journey/projects/wordle-clone/src/App.js",[],[],"/Users/boluoluo/Desktop/main-github/Front-End-Learning-Journey/projects/wordle-clone/src/components/Wordle.js",[],[],"/Users/boluoluo/Desktop/main-github/Front-End-Learning-Journey/projects/wordle-clone/src/hooks/useWordle.js",["24","25","26","27","28"],[],"import { useState } from \"react\";\n\nconst useWordle = (solution) => {\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [history, setHistory] = useState([\"hello\", \"ninja\"]);\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedGuess = [...currentGuess].map((l) => {\n      return { key: l, color: \"grey\" };\n    });\n\n    //green letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        formattedGuess[i].color = \"green\";\n        solutionArray[i] = null;\n        //这一步是为了确保下一步变颜色成yellow，不会影响到已经变green的字母\n      }\n    });\n\n    //yellow letters\n    // _ _ _ e d,  s p e a k\n    //     green     yellow\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== \"green\") {\n        formattedGuess[i].color = \"yellow\";\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n\n    return formattedGuess;\n  };\n\n  const addNewGuess = () => {};\n\n  const handleKeyup = ({ key }) => {\n    if (key === \"Enter\") {\n      //turn < 5, no duplicated words, word.length === 5\n      if (turn > 5) {\n        console.log(\"you used all your guesses\");\n        return;\n      }\n\n      if (history.includes(currentGuess)) {\n        console.log(\"you already tried that word\");\n        return;\n      }\n\n      if (currentGuess.length !== 5) {\n        console.log(\"word must be 5 characters long\");\n        return;\n      }\n      const formatted = formatGuess();\n      console.log(formatted);\n    }\n    if (key === \"Backspace\") {\n      setCurrentGuess((prev) => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess((prev) => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return { turn, currentGuess, guesses, isCorrect, handleKeyup };\n};\n\nexport default useWordle;\n",[],{"ruleId":"29","severity":1,"message":"30","line":4,"column":16,"nodeType":"31","messageId":"32","endLine":4,"endColumn":23},{"ruleId":"29","severity":1,"message":"33","line":6,"column":19,"nodeType":"31","messageId":"32","endLine":6,"endColumn":29},{"ruleId":"29","severity":1,"message":"34","line":7,"column":19,"nodeType":"31","messageId":"32","endLine":7,"endColumn":29},{"ruleId":"29","severity":1,"message":"35","line":8,"column":21,"nodeType":"31","messageId":"32","endLine":8,"endColumn":33},{"ruleId":"29","severity":1,"message":"36","line":39,"column":9,"nodeType":"31","messageId":"32","endLine":39,"endColumn":20},"no-unused-vars","'setTurn' is assigned a value but never used.","Identifier","unusedVar","'setGuesses' is assigned a value but never used.","'setHistory' is assigned a value but never used.","'setIsCorrect' is assigned a value but never used.","'addNewGuess' is assigned a value but never used."]