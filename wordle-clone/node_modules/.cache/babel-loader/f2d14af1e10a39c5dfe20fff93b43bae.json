{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [history, setHistory] = useState([\"hello\", \"ninja\"]);\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedGuess = [...currentGuess].map(l => {\n      return {\n        key: l,\n        color: \"grey\"\n      };\n    }); //green letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        formattedGuess[i].color = \"green\";\n        solutionArray[i] = null; //这一步是为了确保下一步变颜色成yellow，不会影响到已经变green的字母\n      }\n    }); //yellow letters\n    // _ _ _ e d,  s p e a k\n    //     green     yellow\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== \"green\") {\n        formattedGuess[i].color = \"yellow\";\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n    return formattedGuess;\n  };\n\n  const addNewGuess = () => {};\n\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === \"Enter\") {\n      //turn < 5, no duplicated words, word.length === 5\n      if (turn > 5) {\n        console.log(\"you used all your guesses\");\n        return;\n      }\n\n      if (history.includes(currentGuess)) {\n        console.log(\"you already tried that word\");\n        return;\n      }\n\n      if (currentGuess.length !== 5) {\n        console.log(\"word must be 5 characters long\");\n        return;\n      }\n\n      const formatted = formatGuess();\n      console.log(formatted);\n    }\n\n    if (key === \"Backspace\") {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyup\n  };\n};\n\n_s(useWordle, \"/0fhv2JW54vLj1qMP/9I49i730I=\");\n\nexport default useWordle;","map":{"version":3,"names":["useState","useWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","formatGuess","solutionArray","formattedGuess","map","l","key","color","forEach","i","includes","indexOf","addNewGuess","handleKeyup","console","log","length","formatted","prev","slice","test"],"sources":["/Users/boluoluo/Desktop/main-github/Front-End-Learning-Journey/projects/wordle-clone/src/hooks/useWordle.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst useWordle = (solution) => {\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [history, setHistory] = useState([\"hello\", \"ninja\"]);\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedGuess = [...currentGuess].map((l) => {\n      return { key: l, color: \"grey\" };\n    });\n\n    //green letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        formattedGuess[i].color = \"green\";\n        solutionArray[i] = null;\n        //这一步是为了确保下一步变颜色成yellow，不会影响到已经变green的字母\n      }\n    });\n\n    //yellow letters\n    // _ _ _ e d,  s p e a k\n    //     green     yellow\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== \"green\") {\n        formattedGuess[i].color = \"yellow\";\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n\n    return formattedGuess;\n  };\n\n  const addNewGuess = () => {};\n\n  const handleKeyup = ({ key }) => {\n    if (key === \"Enter\") {\n      //turn < 5, no duplicated words, word.length === 5\n      if (turn > 5) {\n        console.log(\"you used all your guesses\");\n        return;\n      }\n\n      if (history.includes(currentGuess)) {\n        console.log(\"you already tried that word\");\n        return;\n      }\n\n      if (currentGuess.length !== 5) {\n        console.log(\"word must be 5 characters long\");\n        return;\n      }\n      const formatted = formatGuess();\n      console.log(formatted);\n    }\n    if (key === \"Backspace\") {\n      setCurrentGuess((prev) => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess((prev) => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return { turn, currentGuess, guesses, isCorrect, handleKeyup };\n};\n\nexport default useWordle;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}