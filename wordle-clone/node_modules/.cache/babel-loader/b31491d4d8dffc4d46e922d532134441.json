{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [history, setHistory] = useState([\"hello\", \"ninja\"]);\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n  };\n\n  const addNewGuess = () => {};\n\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === \"Enter\") {\n      //turn < 5, no duplicated words, word.length === 5\n      if (turn > 5) {\n        console.log(\"you used all your guesses\");\n        return;\n      }\n\n      if (history.includes(currentGuess)) {\n        console.log(\"you already tried that word\");\n        return;\n      }\n\n      if (currentGuess.length !== 5) {\n        console.log(\"word must be 5 characters long\");\n        return;\n      }\n\n      formatGuess();\n    }\n\n    if (key === \"Backspace\") {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyup\n  };\n};\n\n_s(useWordle, \"/0fhv2JW54vLj1qMP/9I49i730I=\");\n\nexport default useWordle;","map":{"version":3,"names":["useState","useWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","formatGuess","solutionArray","addNewGuess","handleKeyup","key","console","log","includes","length","prev","slice","test"],"sources":["/Users/boluoluo/Desktop/main-github/Front-End-Learning-Journey/projects/wordle-clone/src/hooks/useWordle.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst useWordle = (solution) => {\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [history, setHistory] = useState([\"hello\", \"ninja\"]);\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n  };\n\n  const addNewGuess = () => {};\n\n  const handleKeyup = ({ key }) => {\n    if (key === \"Enter\") {\n      //turn < 5, no duplicated words, word.length === 5\n      if (turn > 5) {\n        console.log(\"you used all your guesses\");\n        return;\n      }\n\n      if (history.includes(currentGuess)) {\n        console.log(\"you already tried that word\");\n        return;\n      }\n\n      if (currentGuess.length !== 5) {\n        console.log(\"word must be 5 characters long\");\n        return;\n      }\n      formatGuess();\n    }\n    if (key === \"Backspace\") {\n      setCurrentGuess((prev) => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess((prev) => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return { turn, currentGuess, guesses, isCorrect, handleKeyup };\n};\n\nexport default useWordle;\n"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,SAAS,GAAIC,QAAD,IAAc;EAAA;;EAC9B,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,CAAD,CAAhC;EACA,MAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CAAC,OAAD,EAAU,OAAV,CAAD,CAAtC;EACA,MAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;;EAEA,MAAMa,WAAW,GAAG,MAAM;IACxB,IAAIC,aAAa,GAAG,CAAC,GAAGZ,QAAJ,CAApB;EACD,CAFD;;EAIA,MAAMa,WAAW,GAAG,MAAM,CAAE,CAA5B;;EAEA,MAAMC,WAAW,GAAG,QAAa;IAAA,IAAZ;MAAEC;IAAF,CAAY;;IAC/B,IAAIA,GAAG,KAAK,OAAZ,EAAqB;MACnB;MACA,IAAId,IAAI,GAAG,CAAX,EAAc;QACZe,OAAO,CAACC,GAAR,CAAY,2BAAZ;QACA;MACD;;MAED,IAAIV,OAAO,CAACW,QAAR,CAAiBf,YAAjB,CAAJ,EAAoC;QAClCa,OAAO,CAACC,GAAR,CAAY,6BAAZ;QACA;MACD;;MAED,IAAId,YAAY,CAACgB,MAAb,KAAwB,CAA5B,EAA+B;QAC7BH,OAAO,CAACC,GAAR,CAAY,gCAAZ;QACA;MACD;;MACDN,WAAW;IACZ;;IACD,IAAII,GAAG,KAAK,WAAZ,EAAyB;MACvBX,eAAe,CAAEgB,IAAD,IAAU;QACxB,OAAOA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;MACD,CAFc,CAAf;MAGA;IACD;;IAED,IAAI,aAAaC,IAAb,CAAkBP,GAAlB,CAAJ,EAA4B;MAC1B,IAAIZ,YAAY,CAACgB,MAAb,GAAsB,CAA1B,EAA6B;QAC3Bf,eAAe,CAAEgB,IAAD,IAAU;UACxB,OAAOA,IAAI,GAAGL,GAAd;QACD,CAFc,CAAf;MAGD;IACF;EACF,CAjCD;;EAmCA,OAAO;IAAEd,IAAF;IAAQE,YAAR;IAAsBE,OAAtB;IAA+BI,SAA/B;IAA0CK;EAA1C,CAAP;AACD,CAjDD;;GAAMf,S;;AAmDN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}